{"version":3,"sources":["shared/auth/getLoggedInUser.ts","shared/auth/githubInfo.ts","shared/consts.ts","components/ListWithBadges.tsx","components/Login.tsx","shared/auth/getToken.ts","components/TopTokensList.tsx","shared/auth/createAuthHeader.ts","components/Help.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getLoggedInUser","avatarNode","document","querySelector","id","getAttribute","substring","avatar","getGithubInfo","_getGithubInfo","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","chrome","storage","sync","get","results","github_token","token","github_id","github_avatar","loggedInUser","stop","setGithubToken","_x","_setGithubToken","_callee2","_context2","set","setGithubUserId","_x2","_x3","_setGithubUserId","_callee3","userId","avatarUrl","_context3","GITHUB_CLIENT_ID","API_ROOT_URL","ListWithBadges","props","_useState","useState","_useState2","Object","slicedToArray","copiedIdx","setCopiedIdx","selectInputContents","evt","input","target","inputIdx","parseInt","setSelectionRange","value","length","execCommand","blur","preventDefault","react_default","createElement","className","label","items","map","tokenItem","idx","key","type","data-idx","concat","onClick","count","Login","identity","interactive","callback","then","_ref","asyncToGenerator","mark","info","launchWebAuthFlow","options","redirectUri2","runtime","lastError","Error","matches","match","redirectRe","handleProviderResponse","parseRedirectFragment","localRedirectUri","getRedirectURL","RegExp","url","encodeURIComponent","fragment","pairs","split","values","forEach","pair","nameVal","_handleProviderResponse","hasOwnProperty","setAccessToken","access_token","user_id","_x4","_x5","_setAccessToken","getToken","err","console","error","log","onAuth","TopTokensList","user","global","tokenList","setTokenList","_useState3","_useState4","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","authHeaders","userInfo","Authorization","Content-Type","fetch","headers","resp","ok","json","catch","message","Fragment","ListWithBadges_ListWithBadges","components_Login","Help","react","href","style","backgroundColor","color","App","auth","setAuth","authInfo","TopTokensList_TopTokensList","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ef2b023.chunk.js","sourcesContent":["export default function getLoggedInUser() {\n  const avatarNode = document.querySelector(\"summary img.avatar\");\n  if (avatarNode) {\n    const userName = (avatarNode.getAttribute(\"alt\") || \"\").substring(1);\n    const avatar = avatarNode.getAttribute(\"src\");\n    return {\n      id: userName,\n      avatar\n    };\n  }\n\n  return null;\n}\n","import getLoggedInUser from \"./getLoggedInUser\";\n\ndeclare const chrome: any;\n\nexport interface GithubInfo {\n  token: string | null;\n  id: string | null;\n  avatar: string | null;\n}\n\nexport async function getGithubInfo(): Promise<GithubInfo> {\n  return new Promise(resolve => {\n    chrome.storage.sync.get(\n      [\"github_token\", \"github_id\", \"github_avatar\"],\n      function(results: any) {\n        if (results.github_token) {\n          resolve({\n            token: results.github_token || null,\n            id: results.github_id || null,\n            avatar: results.github_avatar || null\n          });\n        } else {\n          const loggedInUser = getLoggedInUser();\n          resolve({\n            token: null,\n            id: loggedInUser ? loggedInUser.id : null,\n            avatar: loggedInUser ? loggedInUser.avatar : null\n          });\n        }\n      }\n    );\n  });\n}\n\nexport async function setGithubToken(token: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set({ github_token: token }, function() {\n      resolve();\n    });\n  });\n}\n\nexport async function setGithubUserId(userId: string, avatarUrl: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set(\n      { github_id: userId, github_avatar: avatarUrl },\n      function() {\n        resolve();\n      }\n    );\n  });\n}\n","export const GITHUB_CLIENT_ID = \"9b9e17e168e82438cfb6\";\nexport const API_ROOT_URL =\n  \"https://us-central1-git-meme-prod.cloudfunctions.net/api\";\n\n// DO NOT CHECK IN\n// function getFakeUrl() {\n//   console.error(\"Do not check this in\");\n//   return \"http://localhost:5000/git-meme-prod/us-central1/api\";\n// }\n// export const API_ROOT_URL = getFakeUrl();\n","//list-group\nimport React, { useState } from \"react\";\nimport { TopTokenItem } from \"../types\";\nimport \"../style/bootstrap.min.css\";\nimport \"./ListWithBadges.css\";\n\ninterface Props {\n  label: string;\n  items: Array<TopTokenItem>;\n}\n\nexport default function ListWithBadges(props: Props) {\n  const [copiedIdx, setCopiedIdx] = useState(-1);\n  function selectInputContents(evt: any) {\n    const input = evt.target as HTMLInputElement;\n    const inputIdx = parseInt(input.getAttribute(\"data-idx\") || \"-1\", 0);\n    input.setSelectionRange(0, input.value.length);\n    document.execCommand(\"copy\");\n    input.setSelectionRange(0, 0);\n    input.blur();\n    setCopiedIdx(inputIdx);\n\n    evt.preventDefault();\n  }\n\n  return (\n    <div className=\"ListWithBadges\">\n      <h5>{props.label}</h5>\n      <ul className=\"list-group\">\n        {props.items.map((tokenItem: TopTokenItem, idx: number) => {\n          return (\n            <li\n              className=\"list-group-item d-flex justify-content-between align-items-center\"\n              key={idx}\n            >\n              <input\n                type=\"text\"\n                data-idx={idx}\n                value={`/${tokenItem.token}`}\n                onClick={selectInputContents}\n              />\n              {copiedIdx === idx ? (\n                <span className=\"copiedText\">Copied!</span>\n              ) : null}\n              <span className=\"badge badge-primary badge-pill\">\n                {tokenItem.count}\n              </span>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport getToken from \"../shared/auth/getToken\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\n\ndeclare const chrome: any;\n\ninterface Props {\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\nconst Login = (props: Props) => {\n  function _logIn() {\n    if (!chrome || !chrome.identity) {\n      console.log(\"Not in an extension\");\n      return;\n    }\n    getToken(true, async (err: any, info: GithubInfo) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(\"got token info \", info);\n        props.onAuth(info);\n      }\n    });\n  }\n  return (\n    <div className=\"Login\">\n      <button onClick={_logIn}>Log in with Github</button>\n    </div>\n  );\n};\n\nexport default Login;\n","import { GITHUB_CLIENT_ID } from \"../consts\";\nimport { getGithubInfo, setGithubUserId, setGithubToken } from \"./githubInfo\";\n\ndeclare const chrome: any;\n\nexport default function getToken(interactive: boolean, callback: Function) {\n  getGithubInfo().then(async info => {\n    if (true || !info.token || !info.id || !info.avatar) {\n      chrome.identity.launchWebAuthFlow(options, function(\n        redirectUri2: string\n      ) {\n        if (chrome.runtime.lastError) {\n          callback(new Error(chrome.runtime.lastError));\n          return;\n        }\n\n        // Upon success the response is appended to redirectUri, e.g.\n        // https://{app_id}.chromiumapp.org/provider_cb#access_token={value}\n        //     &refresh_token={value}\n        const matches = redirectUri2.match(redirectRe);\n        if (matches && matches.length > 1) {\n          handleProviderResponse(parseRedirectFragment(matches[1]));\n        } else {\n          callback(new Error(\"Invalid redirect URI\"));\n        }\n      });\n    }\n  });\n\n  const localRedirectUri = (chrome as any).identity.getRedirectURL(\n    \"provider_cb\"\n  );\n  const redirectUri =\n    \"https://us-central1-git-meme-prod.cloudfunctions.net/oauth\";\n  const redirectRe = new RegExp(localRedirectUri + \"[#?](.*)\");\n\n  const options = {\n    interactive: interactive,\n    url:\n      \"https://github.com/login/oauth/authorize\" +\n      \"?client_id=\" +\n      GITHUB_CLIENT_ID +\n      \"&redirect_uri=\" +\n      encodeURIComponent(redirectUri)\n  };\n\n  function parseRedirectFragment(fragment: string) {\n    const pairs = fragment.split(/&/);\n    const values: { [key: string]: string } = {};\n\n    pairs.forEach(function(pair) {\n      const nameVal = pair.split(/=/);\n      values[nameVal[0]] = nameVal[1];\n    });\n\n    return values;\n  }\n\n  async function handleProviderResponse(values: { [key: string]: string }) {\n    if (values.hasOwnProperty(\"access_token\")) {\n      await setAccessToken(values.access_token, values.user_id, values.avatar);\n      // If response does not have an access_token, it might have the code,\n      // which can be used in exchange for token.\n    } else {\n      callback(new Error(\"Neither access_token nor code avialable.\"));\n    }\n  }\n\n  async function setAccessToken(token: string, userId: string, avatar: string) {\n    // access_token = token;\n\n    await setGithubToken(token);\n    await setGithubUserId(userId, avatar);\n    callback(null, { token, id: userId, avatar });\n  }\n}\n","import React, { useState, useEffect, MouseEvent } from \"react\";\nimport { API_ROOT_URL } from \"../shared/consts\";\nimport { TopTokenItem } from \"../types\";\nimport ListWithBadges from \"./ListWithBadges\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\nimport \"./TopTokensList.css\";\nimport Login from \"./Login\";\nimport createAuthHeader from \"../shared/auth/createAuthHeader\";\nimport { userInfo } from \"os\";\n\ninterface Props {\n  userInfo: GithubInfo;\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\ntype TokenList = {\n  user: Array<TopTokenItem>;\n  global: Array<TopTokenItem>;\n};\n\nexport default function TopTokensList(props: Props) {\n  const [tokenList, setTokenList] = useState({\n    user: [],\n    global: []\n  } as TokenList);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const authHeaders =\n      props.userInfo.token && props.userInfo.id !== null\n        ? createAuthHeader(props.userInfo.id, props.userInfo.token)\n        : {};\n\n    fetch(API_ROOT_URL + \"/top_tokens\", {\n      headers: authHeaders\n    })\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw new Error(\"Failed to fetch top tokens\");\n      })\n      .then((results: TokenList) => {\n        setTokenList(results);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setError(err.message);\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <div className=\"TopTokensList\">\n      {!error ? (\n        <>\n          <ListWithBadges label=\"Global Top Memes\" items={tokenList.global} />\n          {props.userInfo.token ? (\n            <ListWithBadges label=\"My Top Memes\" items={tokenList.user} />\n          ) : (\n            <div>\n              <h2>My Top Memes</h2>\n              <div>\n                You must log in with your Github account to see the most popular\n                memes used by you and in your company as a whole\n              </div>\n              <div>\n                <Login onAuth={props.onAuth} />\n              </div>\n            </div>\n          )}\n        </>\n      ) : (\n        <div>Error</div>\n      )}\n    </div>\n  );\n}\n","export default function createAuthHeader(userId: string, token: string) {\n  return {\n    Authorization: `Bearer ${userId}___${token}`,\n    \"Content-Type\": \"application/json\"\n  };\n}\n","import * as React from \"react\";\n\nexport default function Help() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">How to use GitMeme</h5>\n        <p>\n          <a href=\"https://gitme.me\" target=\"_blank\">\n            GitMeme\n          </a>{\" \"}\n          brings lots of fun to Github by making it really easy to include Gifs\n          and other images in your comments. In any text box, just type a\n          forward slash and some text to search for an image, e.g{\" \"}\n          <span style={{ backgroundColor: \"#999999\", color: \"white\" }}>\n            /shipit\n          </span>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getGithubInfo, GithubInfo } from \"./shared/auth/githubInfo\";\nimport TopTokensList from \"./components/TopTokensList\";\nimport Help from \"./components/Help\";\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    token: \"\",\n    id: \"\",\n    avatar: \"\"\n  } as GithubInfo);\n\n  useEffect(() => {\n    // Run on mount\n    getGithubInfo().then(authInfo => {\n      console.log(\"Popup got Github Info\", authInfo);\n      setAuth(authInfo);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>GitMeme</h1>\n      <Help />\n      <TopTokensList\n        userInfo={auth}\n        onAuth={(authInfo: GithubInfo) => setAuth(authInfo)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}