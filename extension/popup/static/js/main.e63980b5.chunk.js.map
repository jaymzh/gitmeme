{"version":3,"sources":["shared/auth/getLoggedInUser.ts","shared/auth/githubInfo.ts","shared/consts.ts","components/ListWithBadges.tsx","util/copyToClipboard.ts","components/Login.tsx","shared/auth/getToken.ts","components/TopTokensList.tsx","shared/auth/createAuthHeader.ts","components/Help.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getLoggedInUser","avatarNode","document","querySelector","id","getAttribute","substring","avatar","getGithubInfo","_getGithubInfo","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","chrome","storage","sync","get","results","github_token","token","github_id","github_avatar","loggedInUser","stop","setGithubToken","_x","_setGithubToken","_callee2","_context2","set","setGithubUserId","_x2","_x3","_setGithubUserId","_callee3","userId","avatarUrl","_context3","GITHUB_CLIENT_ID","API_ROOT_URL","commaFormat","formatNumber","ListWithBadges","props","_useState","useState","_useState2","Object","slicedToArray","copiedIdx","setCopiedIdx","react_default","createElement","className","label","items","length","selectInputContents","evt","node","target","nodeIdx","parseInt","text","docElem","documentElement","body","isRTL","textarea","s","prop","value","style","setProperty","yPosition","window","pageYOffset","scrollTop","concat","setAttribute","appendChild","focus","selectionStart","selectionEnd","succeeded","execCommand","err","parentNode","removeChild","copyToClipboard","preventDefault","map","tokenItem","idx","key","data-idx","onClick","count","renderList","emptyMessage","renderEmpty","Login","console","log","identity","interactive","callback","localRedirectUri","getRedirectURL","redirectRe","RegExp","options","url","encodeURIComponent","parseRedirectFragment","fragment","pairs","split","values","forEach","pair","nameVal","handleProviderResponse","_handleProviderResponse","asyncToGenerator","mark","hasOwnProperty","setAccessToken","access_token","user_id","Error","_x4","_x5","_setAccessToken","then","_ref","info","launchWebAuthFlow","redirectUri2","runtime","lastError","error","matches","match","getToken","onAuth","TopTokensList","user","global","tokenList","setTokenList","_useState3","_useState4","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","authHeaders","userInfo","Authorization","Content-Type","fetch","headers","resp","ok","json","catch","message","Fragment","ListWithBadges_ListWithBadges","src_components_Login","Help","react","href","App","auth","setAuth","authComplete","setAuthComplete","authInfo","Help_Help","TopTokensList_TopTokensList","Boolean","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e63980b5.chunk.js","sourcesContent":["export default function getLoggedInUser() {\n  const avatarNode = document.querySelector(\"summary img.avatar\");\n  if (avatarNode) {\n    const userName = (avatarNode.getAttribute(\"alt\") || \"\").substring(1);\n    const avatar = avatarNode.getAttribute(\"src\");\n    return {\n      id: userName,\n      avatar\n    };\n  }\n\n  return null;\n}\n","import getLoggedInUser from \"./getLoggedInUser\";\n\ndeclare const chrome: any;\n\nexport interface GithubInfo {\n  token: string | null;\n  id: string | null;\n  avatar: string | null;\n}\n\nexport async function getGithubInfo(): Promise<GithubInfo> {\n  return new Promise(resolve => {\n    chrome.storage.sync.get(\n      [\"github_token\", \"github_id\", \"github_avatar\"],\n      function(results: any) {\n        if (results.github_token) {\n          resolve({\n            token: results.github_token || null,\n            id: results.github_id || null,\n            avatar: results.github_avatar || null\n          });\n        } else {\n          const loggedInUser = getLoggedInUser();\n          resolve({\n            token: null,\n            id: loggedInUser ? loggedInUser.id : null,\n            avatar: loggedInUser ? loggedInUser.avatar : null\n          });\n        }\n      }\n    );\n  });\n}\n\nexport async function setGithubToken(token: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set({ github_token: token }, function() {\n      resolve();\n    });\n  });\n}\n\nexport async function setGithubUserId(userId: string, avatarUrl: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set(\n      { github_id: userId, github_avatar: avatarUrl },\n      function() {\n        resolve();\n      }\n    );\n  });\n}\n","export const GITHUB_CLIENT_ID = \"9b9e17e168e82438cfb6\";\nexport const API_ROOT_URL =\n  \"https://us-central1-git-meme-prod.cloudfunctions.net/api\";\n\n// DO NOT CHECK IN\n// function getFakeUrl() {\n//   console.error(\"Do not check this in\");\n//   return \"http://localhost:5000/git-meme-prod/us-central1/api\";\n// }\n// export const API_ROOT_URL = getFakeUrl();\n","//list-group\nimport React, { useState } from \"react\";\nimport { TopTokenItem } from \"../types\";\nimport \"../style/bootstrap.min.css\";\nimport copyToClipboard from \"../util/copyToClipboard\";\nimport formatNumber from \"format-number\";\nimport \"./ListWithBadges.css\";\nimport \"./token.css\";\n\ninterface Props {\n  emptyMessage?: React.ReactNode;\n  label: string;\n  items: Array<TopTokenItem>;\n}\n\nconst commaFormat = formatNumber({});\n\nexport default function ListWithBadges(props: Props) {\n  const [copiedIdx, setCopiedIdx] = useState(-1);\n  return (\n    <div className=\"ListWithBadges\">\n      <div className=\"listHeader\">\n        <span className=\"listLabel\">{props.label}</span>\n        {props.items.length > 0 ? (\n          <span className=\"timesUsed\">Times used</span>\n        ) : null}\n      </div>\n      {props.items.length > 0\n        ? renderList(props, copiedIdx, setCopiedIdx)\n        : renderEmpty(props)}\n    </div>\n  );\n}\n\nfunction renderList(\n  props: Props,\n  copiedIdx: number,\n  setCopiedIdx: Function\n): React.ReactNode {\n  function selectInputContents(evt: any) {\n    const node = evt.target as HTMLInputElement;\n    const nodeIdx = parseInt(node.getAttribute(\"data-idx\") || \"-1\", 0);\n    const text = props.items[nodeIdx].token;\n    copyToClipboard(`/${text}`);\n    setCopiedIdx(nodeIdx);\n\n    evt.preventDefault();\n  }\n  return (\n    <ul className=\"list-group\">\n      {props.items.map((tokenItem: TopTokenItem, idx: number) => {\n        return (\n          <li className=\"list-group-item d-flex align-items-left\" key={idx}>\n            <span className=\"idx\">{idx + 1}.</span>\n            <span\n              className=\"token\"\n              data-idx={idx}\n              onClick={selectInputContents}\n            >\n              /{tokenItem.token}\n            </span>\n            {copiedIdx === idx ? (\n              <span className=\"copiedText\">Copied!</span>\n            ) : null}\n            <span className=\"count\">{commaFormat(tokenItem.count)}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction renderEmpty(props: Props) {\n  return (\n    <div className=\"emptyList\">\n      {props.emptyMessage || (\n        <span>\n          <strong>{props.label}</strong>: No memes found, try choosing from\n          another list!\n        </span>\n      )}\n    </div>\n  );\n}\n","// @flow\n\nexport default function copyToClipboard(text: string): boolean {\n  const docElem = document.documentElement;\n  if (!docElem || !document.body) {\n    return false;\n  }\n  const isRTL = docElem.getAttribute(\"dir\") === \"rtl\";\n  const textarea = document.createElement(\"textarea\");\n  function s(prop: string, value: string) {\n    textarea.style.setProperty(prop, value);\n  }\n  s(\"fontSize\", \"12pt\");\n  // Reset box model\n  s(\"border\", \"0\");\n  s(\"padding\", \"0\");\n  s(\"margin\", \"0\");\n  s(\"position\", \"absolute\");\n  s(isRTL ? \"right\" : \"left\", \"-9999px\");\n\n  let yPosition = window.pageYOffset || docElem.scrollTop;\n  s(\"top\", `${yPosition}px`);\n\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n  if (!document.body) {\n    return false;\n  }\n  document.body.appendChild(textarea);\n  textarea.focus();\n  textarea.selectionStart = 0;\n  textarea.selectionEnd = text.length;\n\n  let succeeded = false;\n\n  try {\n    succeeded = document.execCommand(\"copy\");\n  } catch (err) {\n    succeeded = false;\n  }\n  if (textarea.parentNode) {\n    textarea.parentNode.removeChild(textarea);\n  }\n  return succeeded;\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport getToken from \"../shared/auth/getToken\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\n\nimport \"./Login.css\";\n\ndeclare const chrome: any;\n\ninterface Props {\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\nconst Login = (props: Props) => {\n  function _logIn() {\n    console.log(\"Logging in\");\n    try {\n      if (!chrome || !chrome.identity) {\n        console.log(\"Not in an extension\");\n        return;\n      }\n      getToken(true, async (err: any, info: GithubInfo) => {\n        console.log(\"getToken complete\", \"Error is \", err, \"info is \", info);\n        if (err) {\n          console.error(err);\n        } else {\n          console.log(\"got token info \", info);\n          props.onAuth(info);\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  return (\n    <div className=\"Login\">\n      <button onClick={_logIn}>Log in with Github</button>\n    </div>\n  );\n};\n\nexport default Login;\n","import { GITHUB_CLIENT_ID } from \"../consts\";\nimport { getGithubInfo, setGithubUserId, setGithubToken } from \"./githubInfo\";\n\ndeclare const chrome: any;\n\nexport default function getToken(interactive: boolean, callback: Function) {\n  console.log(\"getToken\");\n\n  const localRedirectUri = (chrome as any).identity.getRedirectURL(\n    \"provider_cb\"\n  );\n  const redirectUri =\n    \"https://us-central1-git-meme-prod.cloudfunctions.net/oauth\";\n  const redirectRe = new RegExp(localRedirectUri + \"[#?](.*)\");\n\n  const options = {\n    interactive: interactive,\n    url:\n      \"https://github.com/login/oauth/authorize\" +\n      \"?client_id=\" +\n      GITHUB_CLIENT_ID +\n      \"&redirect_uri=\" +\n      encodeURIComponent(redirectUri)\n  };\n\n  getGithubInfo().then(async info => {\n    console.log(\"got github info \", info);\n    if (!info.token || !info.id || !info.avatar) {\n      console.log(\"calling launchWebAuthFlow with options\", options);\n      chrome.identity.launchWebAuthFlow(options, function(\n        redirectUri2: string\n      ) {\n        console.log(\"launchWebAuthFlow callback with redirect \", redirectUri2);\n        if (chrome.runtime.lastError) {\n          console.error(\"launchWebAuthFlow error\", chrome.runtime.lastError);\n          callback(new Error(chrome.runtime.lastError));\n          return;\n        }\n\n        // Upon success the response is appended to redirectUri, e.g.\n        // https://{app_id}.chromiumapp.org/provider_cb#access_token={value}\n        //     &refresh_token={value}\n        const matches = redirectUri2.match(redirectRe);\n\n        console.log(\"matches = \", matches);\n        if (matches && matches.length > 1) {\n          console.log(\"calling handleProviderResponse\");\n          handleProviderResponse(parseRedirectFragment(matches[1]));\n        } else {\n          callback(\"Invalid redirect URI\");\n        }\n      });\n    }\n  });\n\n  function parseRedirectFragment(fragment: string) {\n    const pairs = fragment.split(/&/);\n    const values: { [key: string]: string } = {};\n\n    pairs.forEach(function(pair) {\n      const nameVal = pair.split(/=/);\n      values[nameVal[0]] = nameVal[1];\n    });\n\n    console.log(\"parseRedirectFragment got values\", values);\n\n    return values;\n  }\n\n  async function handleProviderResponse(values: { [key: string]: string }) {\n    if (values.hasOwnProperty(\"access_token\")) {\n      await setAccessToken(values.access_token, values.user_id, values.avatar);\n      // If response does not have an access_token, it might have the code,\n      // which can be used in exchange for token.\n    } else {\n      callback(new Error(\"Neither access_token nor code avialable.\"));\n    }\n  }\n\n  async function setAccessToken(token: string, userId: string, avatar: string) {\n    // access_token = token;\n\n    await setGithubToken(token);\n    await setGithubUserId(userId, avatar);\n    callback(null, { token, id: userId, avatar });\n  }\n}\n","import React, { useState, useEffect, MouseEvent } from \"react\";\nimport { API_ROOT_URL } from \"../shared/consts\";\nimport { TopTokenItem } from \"../types\";\nimport ListWithBadges from \"./ListWithBadges\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\nimport \"./TopTokensList.css\";\nimport Login from \"./Login\";\nimport createAuthHeader from \"../shared/auth/createAuthHeader\";\n\ninterface Props {\n  userInfo: GithubInfo;\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\ntype TokenList = {\n  user: Array<TopTokenItem>;\n  global: Array<TopTokenItem>;\n};\n\nexport default function TopTokensList(props: Props) {\n  const [tokenList, setTokenList] = useState({\n    user: [],\n    global: []\n  } as TokenList);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const authHeaders =\n      props.userInfo.token && props.userInfo.id !== null\n        ? createAuthHeader(props.userInfo.id, props.userInfo.token)\n        : {};\n\n    fetch(API_ROOT_URL + \"/top_tokens\", {\n      headers: authHeaders\n    })\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw new Error(\"Failed to fetch top tokens\");\n      })\n      .then((results: TokenList) => {\n        setTokenList(results);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setError(err.message);\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <div className=\"TopTokensList\">\n      {!error ? (\n        <>\n          <ListWithBadges label=\"Trending\" items={tokenList.global} />\n          <ListWithBadges\n            label=\"Your Memes\"\n            items={props.userInfo.token ? tokenList.user : []}\n            emptyMessage={\n              <div className=\"emptyMsg\">\n                <div>\n                  Log in with your Github account to see the most popular memes\n                  used by you and your team\n                </div>\n                <div>\n                  <Login onAuth={props.onAuth} />\n                </div>\n              </div>\n            }\n          />\n        </>\n      ) : (\n        <div>Error</div>\n      )}\n    </div>\n  );\n}\n","export default function createAuthHeader(userId: string, token: string) {\n  return {\n    Authorization: `Bearer ${userId}___${token}`,\n    \"Content-Type\": \"application/json\"\n  };\n}\n","import * as React from \"react\";\n\nimport \"./Help.css\";\nimport \"./token.css\";\n\nexport default function Help() {\n  return (\n    <div className=\"Help\">\n      <strong>\n        <a href=\"https://gitme.me\" target=\"_blank\">\n          GitMeme\n        </a>\n      </strong>{\" \"}\n      brings lots of fun to Github by making it easy to include Gifs in your\n      comments. In any text box, just type a forward slash and some text to\n      search for an image, e.g <span className=\"token\">/shipit</span>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getGithubInfo, GithubInfo } from \"./shared/auth/githubInfo\";\nimport TopTokensList from \"./components/TopTokensList\";\nimport Help from \"./components/Help\";\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    token: \"\",\n    id: \"\",\n    avatar: \"\"\n  } as GithubInfo);\n  const [authComplete, setAuthComplete] = useState(false);\n\n  useEffect(() => {\n    // Run on mount\n    getGithubInfo().then(authInfo => {\n      setAuth(authInfo);\n      setAuthComplete(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Help />\n      {authComplete ? (\n        <TopTokensList\n          userInfo={auth}\n          onAuth={(authInfo: GithubInfo) => setAuth(authInfo)}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}