{"version":3,"sources":["shared/auth/getLoggedInUser.ts","shared/auth/githubInfo.ts","shared/consts.ts","components/TopTokensList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getLoggedInUser","avatarNode","document","querySelector","id","getAttribute","substring","avatar","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","chrome","storage","sync","get","results","github_token","token","github_id","github_avatar","loggedInUser","stop","API_ROOT_URL","TopTokensList","props","_useState","useState","user","global","_useState2","Object","slicedToArray","tokenList","setTokenList","_useState3","_useState4","setError","useEffect","fetch","then","resp","ok","json","Error","catch","err","message","react_default","createElement","className","map","tokenItem","count","App","setAuth","_getGithubInfo","apply","this","arguments","getGithubInfo","authInfo","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAAe,SAASA,IACtB,IAAMC,EAAaC,SAASC,cAAc,sBAC1C,OAAIF,EAGK,CACLG,IAHgBH,EAAWI,aAAa,QAAU,IAAIC,UAAU,GAIhEC,OAHaN,EAAWI,aAAa,QAOlC,gDCDF,SAAAG,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACE,IAAIC,QAAQ,SAAAC,GACjBC,OAAOC,QAAQC,KAAKC,IAClB,CAAC,eAAgB,YAAa,iBAC9B,SAASC,GACP,GAAIA,EAAQC,aACVN,EAAQ,CACNO,MAAOF,EAAQC,cAAgB,KAC/BnB,GAAIkB,EAAQG,WAAa,KACzBlB,OAAQe,EAAQI,eAAiB,WAE9B,CACL,IAAMC,EAAe3B,IACrBiB,EAAQ,CACNO,MAAO,KACPpB,GAAIuB,EAAeA,EAAavB,GAAK,KACrCG,OAAQoB,EAAeA,EAAapB,OAAS,aAhBlD,wBAAAK,EAAAgB,SAAApB,6BCVA,IACMqB,EACX,2DCaa,SAASC,EAAcC,GAAc,IAAAC,EAChBC,mBAAS,CACzCC,KAAM,GACNC,OAAQ,KAHwCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAC3CO,EAD2CH,EAAA,GAChCI,EADgCJ,EAAA,GAAAK,EAKxBR,mBAAS,IALeS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKpCE,GALoCD,EAAA,GAAAA,EAAA,IAuBlD,OAhBAE,oBAAU,WACQC,MAAMhB,EAAe,eAClCiB,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAAKE,OAEd,MAAM,IAAIC,MAAM,gCAEjBJ,KAAK,SAACxB,GACLkB,EAAalB,KAEd6B,MAAM,SAAAC,GACLT,EAASS,EAAIC,YAEhB,IAGDC,EAAA5C,EAAA6C,cAAA,OAAKC,UAAU,iBACbF,EAAA5C,EAAA6C,cAAA,wBACChB,EAAUJ,OAAOsB,IAAI,SAACC,GACrB,OACEJ,EAAA5C,EAAA6C,cAAA,WACGG,EAAUlC,MACX8B,EAAA5C,EAAA6C,cAAA,QAAMC,UAAU,cAAcE,EAAUC,WCvCpD,IAyBeC,EAzBH,WAAM,IAAA5B,EACQC,mBAAS,CAC/BT,MAAO,GACPpB,GAAI,GACJG,OAAQ,KAJM6B,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACH6B,GADGzB,EAAA,GAAAA,EAAA,IAkBhB,OAXAQ,oBAAU,YHHL,WAAP,OAAAkB,EAAAC,MAAAC,KAAAC,YGKIC,GAAgBpB,KAAK,SAAAqB,GACnBC,QAAQC,IAAI,wBAAyBF,GACrCN,EAAQM,MAET,IAMDb,EAAA5C,EAAA6C,cAAA,YACED,EAAA5C,EAAA6C,cAACzB,EAAD,QCdcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAA5C,EAAA6C,cAACsB,EAAD,MAAS3E,SAAS4E,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.8c33fe57.chunk.js","sourcesContent":["export default function getLoggedInUser() {\n  const avatarNode = document.querySelector(\"summary img.avatar\");\n  if (avatarNode) {\n    const userName = (avatarNode.getAttribute(\"alt\") || \"\").substring(1);\n    const avatar = avatarNode.getAttribute(\"src\");\n    return {\n      id: userName,\n      avatar\n    };\n  }\n\n  return null;\n}\n","import getLoggedInUser from \"./getLoggedInUser\";\n\ndeclare const chrome: any;\n\nexport interface GithubInfo {\n  token: string | null;\n  id: string | null;\n  avatar: string | null;\n}\n\nexport async function getGithubInfo(): Promise<GithubInfo> {\n  return new Promise(resolve => {\n    chrome.storage.sync.get(\n      [\"github_token\", \"github_id\", \"github_avatar\"],\n      function(results: any) {\n        if (results.github_token) {\n          resolve({\n            token: results.github_token || null,\n            id: results.github_id || null,\n            avatar: results.github_avatar || null\n          });\n        } else {\n          const loggedInUser = getLoggedInUser();\n          resolve({\n            token: null,\n            id: loggedInUser ? loggedInUser.id : null,\n            avatar: loggedInUser ? loggedInUser.avatar : null\n          });\n        }\n      }\n    );\n  });\n}\n\nexport async function setGithubToken(token: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set({ github_token: token }, function() {\n      resolve();\n    });\n  });\n}\n\nexport async function setGithubUserId(userId: string, avatarUrl: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set(\n      { github_id: userId, github_avatar: avatarUrl },\n      function() {\n        resolve();\n      }\n    );\n  });\n}\n","export const GITHUB_CLIENT_ID = \"9b9e17e168e82438cfb6\";\nexport const API_ROOT_URL =\n  \"https://us-central1-git-meme-prod.cloudfunctions.net/api\";\n\n// DO NOT CHECK IN\n// export const API_ROOT_URL =\n//   \"http://localhost:5000/git-meme-prod/us-central1/api\";\n","import React, { useState, useEffect } from \"react\";\nimport { API_ROOT_URL } from \"../shared/consts\";\n\ninterface Props {}\n\ninterface TopTokenItem {\n  token: string;\n  count: number;\n}\n\ntype TokenList = {\n  user: Array<TopTokenItem>;\n  global: Array<TopTokenItem>;\n};\n\nexport default function TopTokensList(props: Props) {\n  const [tokenList, setTokenList] = useState({\n    user: [],\n    global: []\n  } as TokenList);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const results = fetch(API_ROOT_URL + \"/top_tokens\")\n      .then(resp => {\n        if (resp.ok) {\n          return resp.json();\n        }\n        throw new Error(\"Failed to fetch top tokens\");\n      })\n      .then((results: TokenList) => {\n        setTokenList(results);\n      })\n      .catch(err => {\n        setError(err.message);\n      });\n  }, []);\n\n  return (\n    <div className=\"TopTokensList\">\n      <h2>Top Tokens</h2>\n      {tokenList.global.map((tokenItem: TopTokenItem) => {\n        return (\n          <div>\n            {tokenItem.token}\n            <span className=\"tokenCount\">{tokenItem.count}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getGithubInfo, GithubInfo } from \"./shared/auth/githubInfo\";\nimport TopTokensList from \"./components/TopTokensList\";\n// import Login from \"./components/Login\";\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    token: \"\",\n    id: \"\",\n    avatar: \"\"\n  } as GithubInfo);\n\n  useEffect(() => {\n    // Run on mount\n    getGithubInfo().then(authInfo => {\n      console.log(\"Popup got Github Info\", authInfo);\n      setAuth(authInfo);\n    });\n  }, []);\n\n  // if (!auth.token) {\n  //   return <Login onAuth={(authInfo: GithubInfo) => setAuth(authInfo)} />;\n  // }\n  return (\n    <span>\n      <TopTokensList />\n    </span>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}