{"version":3,"sources":["shared/auth/githubInfo.ts","shared/consts.ts","components/Login.tsx","shared/auth/getToken.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getGithubInfo","_getGithubInfo","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","resolve","chrome","storage","sync","get","results","token","github_token","id","github_id","avatar","github_avatar","stop","setGithubToken","_x","_setGithubToken","_callee2","_context2","set","setGithubUserId","_x2","_x3","_setGithubUserId","_callee3","userId","avatarUrl","_context3","console","log","GITHUB_CLIENT_ID","Login","props","react_default","createElement","className","onClick","identity","interactive","callback","then","_ref","Object","asyncToGenerator","mark","info","launchWebAuthFlow","options","redirectUri2","runtime","lastError","Error","matches","match","redirectRe","length","handleProviderResponse","parseRedirectFragment","localRedirectUri","getRedirectURL","RegExp","url","encodeURIComponent","fragment","pairs","split","values","forEach","pair","nameVal","_handleProviderResponse","hasOwnProperty","setAccessToken","access_token","user_id","_x4","_x5","_setAccessToken","getToken","err","error","onAuth","App","_useState","useState","_useState2","slicedToArray","auth","setAuth","useEffect","authInfo","components_Login","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f7c2844.chunk.js","sourcesContent":["declare const chrome: any;\n\nexport interface GithubInfo {\n  token: string | null;\n  id: string | null;\n  avatar: string | null;\n}\n\nexport async function getGithubInfo(): Promise<GithubInfo> {\n  return new Promise(resolve => {\n    chrome.storage.sync.get(\n      [\"github_token\", \"github_id\", \"github_avatar\"],\n      function(results: any) {\n        resolve({\n          token: results.github_token || null,\n          id: results.github_id || null,\n          avatar: results.github_avatar || null\n        });\n      }\n    );\n  });\n}\n\nexport async function setGithubToken(token: string) {\n  return new Promise(resolve => {\n    chrome.storage.sync.set({ github_token: token }, function() {\n      resolve();\n    });\n  });\n}\n\nexport async function setGithubUserId(userId: string, avatarUrl: string) {\n  return new Promise(resolve => {\n    console.log(\"setGithubUserId \", userId, avatarUrl);\n    chrome.storage.sync.set(\n      { github_id: userId, github_avatar: avatarUrl },\n      function() {\n        resolve();\n      }\n    );\n  });\n}\n","export const GITHUB_CLIENT_ID = \"9b9e17e168e82438cfb6\";\n// export const API_ROOT_URL =\n//   \"https://us-central1-git-meme-prod.cloudfunctions.net/api\";\n\n// DO NOT CHECK IN\nexport const API_ROOT_URL =\n  \"http://localhost:5000/git-meme-prod/us-central1/api\";\n","import React from \"react\";\nimport \"../App.css\";\nimport getToken from \"../shared/auth/getToken\";\nimport { GithubInfo } from \"../shared/auth/githubInfo\";\n\ndeclare const chrome: any;\n\ninterface Props {\n  onAuth: (authInfo: GithubInfo) => void;\n}\n\nconst Login = (props: Props) => {\n  function _logIn() {\n    if (!chrome || !chrome.identity) {\n      console.log(\"Not in an extension\");\n      return;\n    }\n    getToken(true, async (err: any, info: GithubInfo) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(\"got token info \", info);\n        props.onAuth(info);\n      }\n    });\n  }\n  return (\n    <div className=\"Login\">\n      <header className=\"App-header\">\n        <button onClick={_logIn}>Log in with Github</button>\n      </header>\n    </div>\n  );\n};\n\nexport default Login;\n","import { GITHUB_CLIENT_ID } from \"../consts\";\nimport { getGithubInfo, setGithubUserId, setGithubToken } from \"./githubInfo\";\n\ndeclare const chrome: any;\n\nexport default function getToken(interactive: boolean, callback: Function) {\n  console.log(\"getToken called\");\n\n  getGithubInfo().then(async info => {\n    if (true || !info.token || !info.id || !info.avatar) {\n      chrome.identity.launchWebAuthFlow(options, function(\n        redirectUri2: string\n      ) {\n        if (chrome.runtime.lastError) {\n          callback(new Error(chrome.runtime.lastError));\n          return;\n        }\n\n        // Upon success the response is appended to redirectUri, e.g.\n        // https://{app_id}.chromiumapp.org/provider_cb#access_token={value}\n        //     &refresh_token={value}\n        const matches = redirectUri2.match(redirectRe);\n        if (matches && matches.length > 1) {\n          handleProviderResponse(parseRedirectFragment(matches[1]));\n        } else {\n          callback(new Error(\"Invalid redirect URI\"));\n        }\n      });\n    }\n  });\n\n  const localRedirectUri = (chrome as any).identity.getRedirectURL(\n    \"provider_cb\"\n  );\n  const redirectUri =\n    \"https://us-central1-git-meme-prod.cloudfunctions.net/oauth\";\n  const redirectRe = new RegExp(localRedirectUri + \"[#?](.*)\");\n\n  const options = {\n    interactive: interactive,\n    url:\n      \"https://github.com/login/oauth/authorize\" +\n      \"?client_id=\" +\n      GITHUB_CLIENT_ID +\n      \"&redirect_uri=\" +\n      encodeURIComponent(redirectUri)\n  };\n\n  function parseRedirectFragment(fragment: string) {\n    console.log(\"parseRedirectFragment called with\", fragment);\n    const pairs = fragment.split(/&/);\n    const values: { [key: string]: string } = {};\n\n    pairs.forEach(function(pair) {\n      const nameVal = pair.split(/=/);\n      values[nameVal[0]] = nameVal[1];\n    });\n\n    return values;\n  }\n\n  async function handleProviderResponse(values: { [key: string]: string }) {\n    console.log(\"handleProviderResponse\", values);\n    if (values.hasOwnProperty(\"access_token\")) {\n      await setAccessToken(values.access_token, values.user_id, values.avatar);\n      // If response does not have an access_token, it might have the code,\n      // which can be used in exchange for token.\n    } else {\n      callback(new Error(\"Neither access_token nor code avialable.\"));\n    }\n  }\n\n  async function setAccessToken(token: string, userId: string, avatar: string) {\n    // access_token = token;\n    console.log(\n      \"Setting access_token: \",\n      token,\n      \"user id\",\n      userId,\n      \"avatar\",\n      avatar\n    );\n\n    await setGithubToken(token);\n    await setGithubUserId(userId, avatar);\n    callback(null, { token, id: userId, avatar });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getGithubInfo, GithubInfo } from \"./shared/auth/githubInfo\";\nimport Login from \"./components/Login\";\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    token: \"\",\n    id: \"\",\n    avatar: \"\"\n  } as GithubInfo);\n\n  useEffect(() => {\n    // Run on mount\n    getGithubInfo().then(authInfo => {\n      console.log(\"Popup got Github Info\", authInfo);\n      setAuth(authInfo);\n    });\n  }, []);\n\n  if (!auth.token) {\n    return <Login onAuth={(authInfo: GithubInfo) => setAuth(authInfo)} />;\n  }\n  return <span>{\"Hello \" + auth.id}</span>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}